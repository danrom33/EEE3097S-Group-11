% Constants
c = 343; % Speed of sound in m/s
f = 440; % Frequency of source in Hz
Fs = 44100; % Sampling rate in Hz
duration = 0.1; % Duration of the signal in seconds

% Microphone positions
mic = [0, 0;      % Mic 1
       0.8, 0;    % Mic 2
       0, 0.5;    % Mic 3
       0.8, 0.5]; % Mic 4

% Simulated source position
source_x = rand()*0.8;
source_y = rand()*0.5;

% Generate a simple sine wave
t = 0:1/Fs:duration;
signal = sin(2*pi*f*t);

% Compute distances from the source to each microphone
d = sqrt(sum((mic - [source_x, source_y]).^2, 2));

% Calculate delays for each microphone
delays = round((d / c) * Fs);

% Create delayed signals for each microphone
delayed_signals = zeros(4, length(signal) + max(delays));
for i = 1:4
    delayed_signals(i, delays(i) + 1 : delays(i) + length(signal)) = signal;
end

% Add white Gaussian noise to the signals
noise_level = 0.05; % Adjust as needed
noisy_signals = delayed_signals + noise_level*randn(size(delayed_signals));

time_diffs = zeros(1,3);
for i = 2:4
    [cross_corr, lags] = xcorr(noisy_signals(1,:), noisy_signals(i,:));
    [~, idx] = max(cross_corr);
    time_diffs(i-1) = lags(idx) / Fs;
end

% ... [previous code]

% Generate symbolic hyperbolic equations
syms x y

hyperbolae = cell(1, 3);
for i = 2:4
    equation = sqrt((x - mic(i,1))^2 + (y - mic(i,2))^2) - sqrt(x^2 + y^2) + c * time_diffs(i-1);
    hyperbolae{i-1} = equation;  % Ensuring it's an equation set to zero
end


% Generate a grid of points to evaluate the hyperbolic equation
x_range = 0:0.001:0.8;
y_range = 0:0.001:0.5;
[X, Y] = meshgrid(x_range, y_range);

% Plot the hyperbolas
figure; hold on;
colors = ['r', 'g', 'b'];
for i = 2:4
    Z = c*time_diffs(i-1) + sqrt((X-mic(i,1)).^2 + (Y-mic(i,2)).^2) - sqrt((X-mic(1,1)).^2 + (Y-mic(1,2)).^2);
    contour(X, Y, Z, [0 0], colors(i-1));
end


solutions1 = solve([hyperbolae{1}, hyperbolae{2}], [x, y]);
solutions2 = solve([hyperbolae{2}, hyperbolae{3}], [x, y]);
solutions3 = solve([hyperbolae{1}, hyperbolae{3}], [x, y]);

% Extract x and y values of the intersections
x_intersections1 = double(solutions1.x);
y_intersections1 = double(solutions1.y);
x_intersections2 = double(solutions2.x);
y_intersections2 = double(solutions2.y);
x_intersections3 = double(solutions3.x);
y_intersections3 = double(solutions3.y);

% ... [Your code up to the point of extracting the intersections]

% Getting the vertices of the triangle
A = [x_intersections1, y_intersections1];
B = [x_intersections2, y_intersections2];
C = [x_intersections3, y_intersections3];

% Compute centroid
centroid_x = (A(1) + B(1) + C(1)) / 3;
centroid_y = (A(2) + B(2) + C(2)) / 3;

centroid = [centroid_x, centroid_y];
source = [so]

% Display the centroid
disp('Centroid of the triangle:');
disp(centroid);

% Display the source
disp('Source:');, s
disp(source);

% Plot the intersections (vertices of the triangle)
plot([A(1), B(1), C(1)], [A(2), B(2), C(2)], 'ko', 'MarkerSize', 10, 'DisplayName', 'Intersections');

% Plot the source position
plot(source_x, source_y, 'mx', 'MarkerSize', 10, 'DisplayName', 'Source');

% Plot the centroid of the triangle
plot(centroid_x, centroid_y, 'o', 'Color', [0.6 0.2 0], 'MarkerSize', 10, 'DisplayName', 'Centroid');

% Some graphical adjustments
legend('show'); % To show a legend on the plot
xlabel('X Coordinate');
ylabel('Y Coordinate');
title('Hyperbolae Intersections, Source, and Centroid');
grid on;
axis([0 0.8 0 0.5]); % Setting the axis limits


